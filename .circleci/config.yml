version: 2.1
jobs:
  sanity-check:
    resource_class: large
    working_directory: ~/project/examples
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name:
          command: |
            sudo apt-get install yamllint python3-pkg-resources
      - run: yamllint -c .yamllint.yml $(git ls-files '*.yaml' '*.yml')
      - run:
          name: Install golangci-lint
          command: |
            export GOLANGCI_LINT_VER=1.23.1
            wget https://github.com/golangci/golangci-lint/releases/download/v${GOLANGCI_LINT_VER}/golangci-lint-${GOLANGCI_LINT_VER}-linux-amd64.tar.gz
            tar -xvf golangci-lint-${GOLANGCI_LINT_VER}-linux-amd64.tar.gz
            sudo mv golangci-lint-${GOLANGCI_LINT_VER}-linux-amd64/golangci-lint /usr/local/bin/
      - run:
          name: Lint examples
          command: |
            make lint-all
    environment:
      GO111MODULE: "on"

  build:
    working_directory: ~/project/examples
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            make build-all

  push:
    parameters:
      example:
        type: string
      org:
        type: string
      tag:
        type: string
    working_directory: ~/project/examples
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Push << parameters.example >> containers with tag << parameters.tag >>
          command: |
            ORG=<< parameters.org >> TAG=<< parameters.tag >> make k8s-<< parameters.example >>-push

  push-all:
    parameters:
      org:
        type: string
      tag:
        type: string
    working_directory: ~/project/examples
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Push all containers with tag << parameters.tag >>
          command: |
            ORG=<< parameters.org >> TAG=<< parameters.tag >> make push-all

  test:
    resource_class: large
    parameters:
      nsmbranch:
        type: string
        default: "master"
      nightly:
        type: string
        default: "false"
    machine:
      enabled: true
      docker_layer_caching: true
    working_directory: ~/project/examples
    parallelism: 2
    steps:
      - run:
          name: Update go to 1.13
          working_directory: /tmp
          command: |
            wget https://dl.google.com/go/go1.13.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -xzf go1.13.linux-amd64.tar.gz
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
      - run:
          name: Install kind
          command: |
            GO111MODULE="on" go get -u sigs.k8s.io/kind@master
            kind version
      - checkout
      - run:
          name: Patch go.mod
          command: |
            if [ "<< parameters.nightly >>" == "true" ]; then
               ./scripts/update_networkservicemesh.sh master # Update to the master branch
            fi
      - run:
          name: Clone NSM
          command: |
            git clone --single-branch --branch << parameters.nsmbranch >> https://github.com/networkservicemesh/networkservicemesh.git ../networkservicemesh
      - run:
          name: Start kind
          command: |
            echo "
            ---
            kind: Cluster
            apiVersion: kind.sigs.k8s.io/v1alpha3
            nodes:
              - role: control-plane
              - role: worker
            " > ../networkservicemesh/scripts/kind.yaml
            make kind-start
            kubectl config use-context kind-nsm
      - run:
          name: Wait for kind to settle
          command: |
            kubectl wait -n kube-system --timeout=150s --for condition=Ready --all pods
      - helm/install-helm-client
      - helm/install-helm-on-cluster:
          enable-cluster-wide-admin-access: true
      - helm/install-helm-chart:
          chart: "../networkservicemesh/deployments/helm/nsm"
          namespace: "nsm-system"
          values-to-override: "org=networkservicemesh,tag=<< parameters.nsmbranch >>,global.JaegerTracing=false,forwardingPlane=vpp,admission-webhook.org=networkservicemesh,admission-webhook.tag=<< parameters.nsmbranch >>,prefix-service.org=networkservicemesh,prefix-service.tag=<< parameters.nsmbranch >>,prometheus=false,metricsCollectorEnabled=false,spire.enabled=false,insecure=true"
      - run:
          name: Test
          command: |
            make $(make list-tests | circleci tests split --split-by=timings)
      - run:
          name: Dump cluster state
          when: always
          command: |
            kubectl get nodes
            kubectl get pods -o wide --namespace=nsm-system
            kubectl get pods -o wide
            kubectl describe pods --namespace=nsm-system
            kubectl describe pods
            make k8s-nsmgr-logs
            make k8s-nsm-vpp-forwarder-logs

orbs:
  helm: circleci/helm@0.2.3
workflows:
  version: 2
  test-and-push:
    jobs:
      - sanity-check
      - test:
          name: "Test Parallel"
          requires:
            - sanity-check
      - push-all:
          name: "Push all"
          org: "networkservicemesh"
          tag: "master"
          filters:
            branches:
              only: master
          requires:
            - "Test Parallel"
  nightly-test:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - sanity-check
      - test:
          name: "Test Parallel"
          nightly: "true"
          requires:
            - sanity-check
