version: 2
jobs:
  sanity-check:
    working_directory: ~/project/examples
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          command: |
            git clone https://github.com/networkservicemesh/networkservicemesh.git ../networkservicemesh
      - run:
          command: |
            sudo apt-get install yamllint python3-pkg-resources
            ./.circleci/install-shellcheck.sh
      - run: yamllint -c .yamllint.yml $(git ls-files '*.yaml' '*.yml')
      - run: go build ./...
    environment:
      GO111MODULE: 'on'
  build:
    working_directory: ~/project/examples
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            git clone https://github.com/networkservicemesh/networkservicemesh.git ../networkservicemesh
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export TAG="${COMMIT}"
            make build-all
  test:
    machine:
      enabled: true
      docker_layer_caching: true
    working_directory: ~/project/examples
    steps:
      - run:
          name: Update go to 1.12
          working_directory: /tmp
          command: |
            wget https://dl.google.com/go/go1.12.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -xzf go1.12.linux-amd64.tar.gz
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
      - run:
          name: Install kind
          command: |
            GO111MODULE="on" go get -u sigs.k8s.io/kind@master
            kind version
      - checkout
      - run:
          name: Clone NSM
          command: |
            git clone https://github.com/networkservicemesh/networkservicemesh.git ../networkservicemesh
      - run:
          name: Start kind
          command: |
            make kind-start
            echo 'export KUBECONFIG="$(kind get kubeconfig-path --name="nsm")"' >> $BASH_ENV
            echo 'export CLUSTER_RULES_PREFIX=kind' >> $BASH_ENV
      - run:
          name: Wait for kind to settle
          command: |
            kubectl wait -n kube-system --timeout=150s --for condition=Ready --all pods
      - run:
          name: Build NSM images
          command: |
            COMMIT="${CIRCLE_SHA1:8:8}" TAG="${COMMIT}" make k8s-save -j2
      - run:
          name: Build example images
          command: |
            make save-all
      - run:
          name: NSM infra deploy
          command: |
            make k8s-infra-deploy
            kubectl wait -n nsm-system --timeout=150s --for condition=Ready --all pods
      - run:
          name: Proxy deploy
          command: |
            make k8s-proxy-load-images k8s-proxy-deploy
            kubectl wait -n default --timeout=150s --for condition=Ready --all pods
      - run:
          name: Proxy check
          command: |
            make k8s-proxy-check
            make k8s-proxy-delete
      - run:
          name: Envoy interceptor deploy
          command: |
            make k8s-envoy_interceptor-load-images k8s-envoy_interceptor-deploy
            kubectl wait -n default --timeout=150s --for condition=Ready --all pods
      - run:
          name: Envoy interceptor check
          command: |
            make k8s-envoy_interceptor-check
            make k8s-envoy_interceptor-delete
      - run:
          name: Dump cluster state
          command: |
            kubectl get nodes --all-namespaces
            kubectl get pods -o wide --all-namespaces
            kubectl describe pods --all-namespaces
workflows:
  version: 2
  build-and-test:
    jobs:
      - sanity-check
      - build:
          requires:
            - sanity-check
      - test:
          requires:
            - sanity-check
  nightly-test:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - test
